var meatwagon=function(){"use strict";const e=/^(?<tagName>[\w-]+)?(?<ids>(?:[\.#][\w-]+)*)(?:\((?<attrs>[^\n]*?)\))?(?:\s(?<text>[\s\S]+)?|(?<dot>\.))?$/,t=/(\.[\w-]+)/g,n=/(#[\w-]+)/g,r=/^\s*/,a=/^((if|while|for)\s*\([\s\S]+\)|else)$/,i=["br","img","hr","area","base","col","command","embed","input","link","meta","keygen","param","source","track","wbr"],c=t=>{const n=t.split(/\r?\n/g),a={type:"root",children:[]},c=[-1],s=[];let l,o,h=a,d=a;for(let t=0;t<n.length;t++){const a=n[t],p=a.trim();if(""===p)continue;const $=c[c.length-1],f=(g=a,r.exec(g)[0].length);if(l){if(o<f){l.children.push({type:"text",value:a.slice(o)+"\n"});continue}l=!1}let w;if("|"===p[0])w={type:"text",value:p.slice(1).trimStart()||" "};else if(p.startsWith("//"))"-"===p[2]&&(w={type:"comment",value:p.slice(3)});else if("-"===p[0])w={type:"code",value:p.slice(1).trim(),children:[]};else{const n=e.exec(p);if(!n)throw new Error(`Line ${t+1}: malformed tag.\n${p}`);const{tagName:r,ids:a,attrs:c,text:s,dot:h}=n.groups;if(w={type:"tag",tagName:r||"div",ids:a,attrs:c,hasText:Boolean(s),children:[],atomic:i.includes(r)},h)l=w,o=f,w.children.push({type:"text",value:"\n"});else if(s){if(w.atomic)throw new Error(`Line ${t+1}: tag ${r} cannot have a text node.\n${p}`);w.children.push({type:"text",value:s.trim()})}}if(f<$){if(-1===c.indexOf(f))throw new Error(`Bad indentation at line ${t+1}, expected depth: ${c.join(", ")} spaces, got ${f}.\n${a}`);for(;c[c.length-1]!==f;)s.pop(),c.pop(),h=s[s.length-1];h.children.push(w)}else if(f>$){if(!("children"in h))throw new Error(`Line ${t+1}: entry of type ${h.type} cannot have children.\n${a}`);if("tag"===h.type){if(i.includes(h.tagName))throw new Error(`Line ${t+1}: tag ${h.tagName} cannot have children.\n${a}`);if(h.hasText)throw new Error(`Line ${t+1}: tag ${h.tagName} has a text node and cannot have children.\n${a}`)}u=d,m=f,c.push(m),s.push(u),h=u,h.children.push(w)}else h.children.push(w);d=w}var u,m,g;return a},s=/`/g,l=e=>e.replace(s,"\\`");let o;const h=e=>{let t="";return o&&!e?t="`;":!o&&e&&(t="html+=`"),o=e,t},d=(e,r=!1)=>{if(e instanceof Array)return e.map(d).join("");let i;switch(e.type){case"comment":return`${h(!0)}\x3c!--${l(e.value)}--\x3e`;case"code":i=h(!1)+e.value;const r=a.test(e.value);return r&&(i+="{"),e.children?.length&&(i+=d(e.children)),r&&(i+=`${h(!1)}}`),o=!1,i;case"text":return`${h(!0)}${l(e.value)}`;case"tag":const c=e.atomic;let s=e.attrs?" "+e.attrs:"";return e.ids&&(s+=(e=>{const r=n.exec(e)?.[0],a=e.match(t);let i="";if(r&&(i+=` id="${r.slice(1)}" `),a?.length){i+=' class="';for(const e of a)i+=e.slice(1)+" ";i=i.slice(0,-1)+'" '}return i.slice(0,-1)})(e.ids)),i=`${h(!0)}<${e.tagName}${l(s)}${c?"/":""}>`,e.children?.length&&(i+=d(e.children)),c||(i+=`${h(!0)}</${e.tagName}>`),o=!0,i}},u=e=>{try{return new Function("state",e)}catch(t){throw console.error(e),new Error(`Malformed JS code: ${t.message}`)}},m=(e,t=!1)=>{let n="let html = '';";return o=!1,n+=d(e.children,t),o&&(n+="`;"),n+="return html;",n};return{render(e,t={},n=!1){const r=c(e),a=m(r,!1);return u(a)(t)},renderer:(e,t=!1)=>u(m(c(e),!1))}}();
//# sourceMappingURL=meatwagon.browser.min.js.map
